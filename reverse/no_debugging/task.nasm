
BITS 64
%idefine rip rel $

;; aghhhhhh_x86
section .data align=16

ptrace_shellcode:

db 0x48, 0x31, 0xd2, 0x48, 0xff, 0xc2, 0x48, 0x31, 0xff, 0x48, 0x31, 0xf6, 0x4d, 0x31, 0xd2, 0x6a, 0x65, 0x58, 0x0f, 0x05, 0xc3

check_tracer_shellcode:
db 0xd3, 0x31, 0x3a, 0x3a, 0x3a, 0x5c, 0x14, 0x35, 0x25, 0xbe, 0x3a, 0x3a, 0x3a, 0x3a, 0x3a, 0xaa, 0x72, 0xb9, 0xd6, 0x02, 0x0b, 0xfa, 0xfd, 0x7e, 0x1e, 0x0e, 0x3a, 0x3a, 0x3a, 0x3a, 0x72, 0xb7, 0x07, 0x6f, 0x38, 0x3a, 0x3a, 0xb3, 0xfc, 0xb3, 0xf8, 0xd2, 0x48, 0x3b, 0x3a, 0x3a, 0xb3, 0x7e, 0x1e, 0x0a, 0x72, 0xb7, 0x4e, 0x1e, 0x2a, 0xb1, 0x46, 0x1e, 0x0a, 0x80, 0x3e, 0x3a, 0x3a, 0x3a, 0xd2, 0x91, 0x3b, 0x3a, 0x3a, 0xb9, 0xc2, 0x3e, 0x4e, 0x3f, 0xd3, 0x05, 0x3b, 0x3a, 0x3a, 0xbb, 0x46, 0x1e, 0x2a, 0x6e, 0x48, 0x5b, 0x59, 0x35, 0xbf, 0xd5, 0x3a, 0x3a, 0x3a, 0x72, 0xb7, 0x4e, 0x1e, 0x2a, 0xb1, 0x46, 0x1e, 0x0a, 0x80, 0x3d, 0x3a, 0x3a, 0x3a, 0xd2, 0xba, 0x3b, 0x3a, 0x3a, 0xb9, 0xc2, 0x3d, 0x4e, 0x3f, 0xd3, 0x2e, 0x3b, 0x3a, 0x3a, 0xbb, 0x46, 0x1e, 0x2a, 0x5f, 0x48, 0x6a, 0x53, 0x35, 0xbf, 0xf8, 0x3a, 0x3a, 0x3a, 0x35, 0x84, 0x7e, 0x1e, 0x2e, 0xb9, 0xc2, 0x5e, 0x35, 0xbf, 0x8e, 0x3a, 0x3a, 0x3a, 0xfd, 0x7e, 0x1e, 0x36, 0x3a, 0x3a, 0x3a, 0x3a, 0x72, 0xb7, 0x7e, 0x1e, 0x2a, 0xb1, 0x46, 0x1e, 0x0a, 0x72, 0x59, 0x76, 0x1e, 0x36, 0x72, 0x3b, 0xf2, 0x72, 0xb3, 0xfc, 0x80, 0x3b, 0x3a, 0x3a, 0x3a, 0xd2, 0x0e, 0x3b, 0x3a, 0x3a, 0xb9, 0xc2, 0x3b, 0x4e, 0x38, 0xd1, 0x24, 0x72, 0x59, 0x7e, 0x1e, 0x36, 0x35, 0x84, 0x76, 0x3e, 0x2a, 0xb9, 0xc3, 0x30, 0x4f, 0x38, 0xd1, 0x37, 0xb1, 0x7e, 0x1e, 0x36, 0xb9, 0xfa, 0x3b, 0xb3, 0x7e, 0x1e, 0x36, 0xd1, 0x87, 0xfd, 0x7e, 0x1e, 0x32, 0x3a, 0x3a, 0x3a, 0x3a, 0xfd, 0x7e, 0x1e, 0x3e, 0x3b, 0x3a, 0x3a, 0x3a, 0xb1, 0x7e, 0x1e, 0x36, 0xb9, 0xfa, 0xc5, 0xb3, 0x7e, 0x1e, 0x36, 0xb9, 0xc2, 0x3a, 0x46, 0x1f, 0x72, 0x59, 0x7e, 0x1e, 0x36, 0x35, 0x84, 0x76, 0x3e, 0x2a, 0xb9, 0xd3, 0x0a, 0x35, 0x95, 0x76, 0x1e, 0x3e, 0x39, 0x76, 0x1e, 0x32, 0xb3, 0x76, 0x1e, 0x32, 0x51, 0x76, 0x1e, 0x3e, 0x30, 0xb3, 0x76, 0x1e, 0x3e, 0xd1, 0xf1, 0xb9, 0x46, 0x1e, 0x32, 0x3a, 0x4e, 0x34, 0xb1, 0x46, 0x1e, 0x32, 0x84, 0x34, 0x3a, 0x3a, 0x3a, 0xd2, 0x3f, 0x3b, 0x3a, 0x3a, 0xb1, 0x7e, 0x1e, 0x32, 0x0f, 0x3a, 0x3a, 0x23, 0x7e, 0xb3, 0x7e, 0x1e, 0x0e, 0xd1, 0x76, 0xd1, 0x07, 0xd1, 0x3a, 0x72, 0xb7, 0x4e, 0x1e, 0x2a, 0xb1, 0x46, 0x1e, 0x0a, 0x80, 0x3b, 0x3a, 0x3a, 0x3a, 0xd2, 0xb5, 0x3a, 0x3a, 0x3a, 0x0b, 0xf3, 0xb9, 0xc2, 0x3b, 0xb2, 0x76, 0x1e, 0x39, 0x4f, 0x35, 0x35, 0x84, 0x7e, 0x1e, 0x2a, 0xb9, 0xc2, 0x30, 0x35, 0xaf, 0xfb, 0xb2, 0x76, 0x1e, 0x39, 0xb0, 0x7e, 0x1e, 0x39, 0x92, 0x3b, 0x4f, 0x38, 0xd1, 0x38, 0xd1, 0xfd, 0xd1, 0x3a, 0xd3, 0x9e, 0xc4, 0xc5, 0xc5, 0xfd, 0x7e, 0x1e, 0x0e, 0x3a, 0x3a, 0x23, 0x7e, 0xb1, 0x7e, 0x1e, 0x0e, 0x72, 0xb9, 0xfe, 0x02, 0xf9, 0xaa, 0x72, 0xb3, 0x46, 0x1e, 0xc2, 0xb3, 0x4e, 0x1e, 0xce, 0xb3, 0x6e, 0x1e, 0xca, 0x72, 0xb1, 0x7e, 0x1e, 0xc2, 0x72, 0xb3, 0x7e, 0x1e, 0xda, 0xb1, 0x76, 0x1e, 0xce, 0xb3, 0x76, 0x1e, 0xe6, 0xb1, 0x76, 0x1e, 0xca, 0xb3, 0x76, 0x1e, 0xe2, 0x72, 0xb1, 0x46, 0x1e, 0xda, 0xb1, 0x4e, 0x1e, 0xe6, 0xb1, 0x6e, 0x1e, 0xe2, 0x82, 0x38, 0x3a, 0x3a, 0x3a, 0x35, 0x3f, 0x72, 0xb3, 0x7e, 0x1e, 0xd2, 0x72, 0xb1, 0x7e, 0x1e, 0xd2, 0xb3, 0x7e, 0x1e, 0xee, 0xb1, 0x7e, 0x1e, 0xee, 0xf9, 0x5c, 0xaa, 0xb3, 0x46, 0x1e, 0xc6, 0x72, 0xb3, 0x4e, 0x1e, 0xca, 0xb3, 0x6e, 0x1e, 0xd6, 0xb1, 0x7e, 0x1e, 0xc6, 0xb3, 0x7e, 0x1e, 0xe6, 0x72, 0xb1, 0x76, 0x1e, 0xca, 0x72, 0xb3, 0x76, 0x1e, 0xea, 0xb1, 0x7e, 0x1e, 0xd6, 0xb3, 0x7e, 0x1e, 0xf6, 0xb1, 0x46, 0x1e, 0xe6, 0x72, 0xb1, 0x4e, 0x1e, 0xea, 0xb1, 0x6e, 0x1e, 0xf6, 0x0b, 0xfa, 0x35, 0x3f, 0x72, 0xb3, 0x7e, 0x1e, 0xda, 0x72, 0xb1, 0x7e, 0x1e, 0xda, 0xb3, 0x7e, 0x1e, 0xf2, 0xb1, 0x7e, 0x1e, 0xf2, 0xf9, 0x35, 0x25, 0x7e, 0x3a, 0x3a, 0xb3, 0x46, 0x1e, 0xc6, 0xb3, 0x4e, 0x1e, 0xc2, 0xb1, 0x7e, 0x1e, 0xc6, 0xb3, 0x7e, 0x1e, 0xd6, 0xb1, 0x7e, 0x1e, 0xc2, 0xb3, 0x7e, 0x1e, 0xd2, 0xb1, 0x46, 0x1e, 0xd6, 0xb1, 0x4e, 0x1e, 0xd2, 0x82, 0x04, 0x3a, 0x3a, 0x3a, 0x35, 0x3f, 0x72, 0xb3, 0x7e, 0x1e, 0xca, 0x72, 0xb1, 0x7e, 0x1e, 0xca, 0xb3, 0x7e, 0x1e, 0xde, 0xb1, 0x7e, 0x1e, 0xde, 0xf9, 0x15, 0x4a, 0x48, 0x55, 0x59, 0x15, 0x49, 0x5f, 0x56, 0x5c, 0x15, 0x49, 0x4e, 0x5b, 0x4e, 0x4f, 0x49, 0x3a

; crc of text = 0xbae6bf61

real_shellcode:
db 0x41, 0x1c, 0x15, 0xc5, 0xb0, 0x3d, 0x00, 0x00, 0x00, 0xba, 0x45, 0xf0, 0x0f, 0x00, 0x48, 0xbf, 0x25, 0x9a, 0x69, 0xf6, 0x9f, 0x79, 0xc7, 0xbe, 0xb7, 0x39, 0x8e, 0x89, 0x27, 0xea, 0x4d, 0xbe, 0x2a, 0x91, 0x7d, 0xe9, 0xa4, 0x79, 0xb5, 0x84, 0x3c, 0x00, 0x00, 0x48, 0x79, 0xce, 0xb7, 0xb7, 0x38, 0xc8, 0x0a, 0xde, 0x38, 0xab, 0x79, 0xea, 0x93, 0x79, 0xe3, 0x9a, 0xb7, 0x3d, 0x19, 0xdf, 0x21, 0x05, 0x04, 0x64, 0x40, 0x41, 0x17, 0x8f, 0xdd, 0x20, 0x65, 0x1f, 0x87, 0x19, 0x1e, 0x1f, 0x1f, 0x27, 0x41, 0xb1, 0xbb, 0x1c, 0xe7, 0x19, 0x89, 0xdd, 0x20, 0xfa, 0x07, 0x42, 0x44, 0x3f, 0x7b, 0x05, 0xd6, 0x47, 0x4a, 0x9f, 0x51, 0x8f, 0x21, 0x01, 0x00, 0x64, 0x40, 0x44, 0x45, 0xf9, 0xc5, 0xf4, 0xee, 0x68, 0x6c, 0x6b, 0x47, 0x4a, 0x9f, 0x01, 0xdf, 0x21, 0x01, 0x00, 0x64, 0x40, 0xda, 0xfe, 0x01, 0x05, 0x04, 0x64, 0x40, 0xdb, 0xdf, 0x21, 0x0d, 0x0c, 0x64, 0x40, 0x48, 0x79, 0xf1, 0x88, 0xb7, 0x3f, 0x88, 0x89, 0x21, 0xe4, 0x54, 0x8f, 0xf3, 0x08, 0x6c, 0xcb, 0x47, 0xcc, 0xd6, 0x27, 0x27, 0x1f, 0x18, 0x31, 0x36, 0x1f, 0x89, 0xcb, 0x6f, 0xe4, 0xd5, 0xc1, 0x38, 0x7b, 0x17, 0xf0, 0xb8, 0x00, 0x80, 0xef, 0x2b, 0x58, 0x97, 0xca, 0x09, 0x71, 0xc1, 0xb0, 0x47, 0x4a, 0x9f, 0x92, 0xcd, 0x5e, 0xaf, 0x6e, 0x52, 0x79, 0xce, 0xb7, 0xc1, 0x71, 0xb0, 0xb7, 0x3f, 0x88, 0xc5, 0xb9, 0x11, 0xf6, 0xf0, 0x63, 0x40, 0xba, 0xac, 0x16, 0x00, 0x00, 0x0f, 0x0a, 0xee, 0xa8, 0x0b, 0x79, 0xce, 0xb7, 0xc1, 0x71, 0xb0, 0xb7, 0x3f, 0x88, 0xc5, 0xb9, 0x11, 0xcf, 0xc9, 0x63, 0x40, 0xba, 0x9d, 0x27, 0x00, 0x00, 0x0f, 0x0a, 0x4d, 0x79, 0xf1, 0x88, 0xb7, 0x3f, 0x88, 0xc5, 0xb9, 0x11, 0x05, 0x04, 0x64, 0x40, 0xba, 0xb6, 0x0c, 0x00, 0x00, 0x0f, 0x0a, 0x4d, 0x79, 0xf1, 0x88, 0xb7, 0x3f, 0x88, 0xc5, 0xb9, 0x11, 0x37, 0x36, 0x64, 0x40, 0x48, 0xc1, 0x4b, 0x8a, 0xb7, 0x3d, 0xcd, 0x0a, 0xbd, 0x84, 0x3c, 0x00, 0x00, 0x48, 0x79, 0xce, 0xb7, 0xb7, 0x38, 0xc8, 0x0a, 0x95, 0x00

wrong_msg:

db '[-] Wrong, try harder', 0xa, 0

correct_msg:

db 'Correct input! the flag is: shellmates{', 0

flag_end:

db '}', 0xa, 0

xor_of_text:
db 0xcf

data_crc:
dd 0xfbcae533; data_crc

section .bss align=16

input:
db 33 dup(?)

stack_section:

dq 1024 dup(?)

section .text progbits align=16

global _start

_start:
  ; read input
  xor rax, rax
  xor rdi, rdi
  lea rsi, input
  xor rdx, rdx
  inc rdx
  shl rdx, 5
  syscall ; read(0, input, 32)

  lea rdi, [rip+7]
  mov rdx, 0xfff
  not rdx
  and rdi, rdx
  xor rsi, rsi
  inc rsi
  shl rsi, 12
  call crc32
  mov r15d, eax
  
  ; mmap for shellcode
  xor rdi, rdi
  xor rsi, rsi
  inc rsi
  mov rdx, rsi
  mov r10, rsi
  mov rax, rsi
  shl rsi, 12
  shl rdx, 3
  dec rdx
  shl r10, 5
  inc r10
  xor r8, r8
  dec r8
  xor r9, r9
  shl rax, 3
  inc rax
  syscall
  mov r13, rax
  mov rdx, rax
  shr rdx, 63
  test rdx, rdx
  jnz err
  
  ; ptrace shellcode:
  ;
  ; xor rdx, rdx
  ; inc rdx
  ; xor rdi, rdi
  ; xor rsi, rsi
  ; xor r10, r10
  ; push 0x65
  ; pop rax
  ; syscall
  ; ret
  
  call +4
  pop rdi
  mov rbx, 0xfff
  mov rcx, rbx
  not rbx
  and rdi, rbx
  inc rcx
  xor rax, rax
  calc_xor:
  xor al, byte[rdi]
  inc rdi
  loop calc_xor
  
  cmp al, byte[xor_of_text]
  jne err
  
  ; real shellcode
  lea rsi, check_tracer_shellcode
  mov rdi, r13
  mov rcx, 652
  
  copy_tracer_shellcode:
  mov al, [rsi]
  xor al, 58
  mov byte[rdi], al
  inc rsi
  inc rdi
  loop copy_tracer_shellcode
  
  call r13
  mov r14d, eax
  
  mov rcx, 21
  lea rsi, ptrace_shellcode
  mov rdi, r13
  rep movsb
  call r13
  xor r14, rax
  
  ;;; REAL CHECK
mov r10d, dword[data_crc]; data_crc

mov rdi, r13
lea rsi, real_shellcode
mov rcx, 306


xor al, al

copy_xor_loop:
xor al, byte[rsi]
mov byte[rdi], al
inc rdi
inc rsi
loop copy_xor_loop

xor al, al
mov rcx, 0xece
repe stosb

call r13


  
  



crc32:
  mov rbp, rsp
  lea rsp, [stack_section]
  
  mov rax, qword[stack_section+8]
  test rax, rax
  jnz end_of_for
  
  lea rsp, [stack_section+2048]
  xor eax, eax
  dec eax

  xor edx, edx

  for_loop:
  test edx, 0x100
  jnz end_of_for

  mov r8d, edx
  mov rcx, 8
  for_2:
  test r8d, 1
  je shift_and_xor
  shr r8d, 1
  jmp end_for2
  shift_and_xor:
  shr r8d, 1
  xor r8d, 0xEDB88320
  end_for2:
  loop for_2
  push r8
  inc edx
  jmp for_loop

  end_of_for:
  test rdi, rdi
  jz skip_for

  lea rcx, [rsi+1]

  for_loop3:
  loop for_body
  jmp skip_for
  for_body:
  mov edx, eax
  shr edx, 8
  movzx eax, al
  xor al, [rdi]
  add rdi, 1
  mov rax, qword[rsp+8*rax]
  xor eax, edx
  jmp for_loop3
  skip_for:
  xor rdx, rdx
  dec rdx
  xor rax, rdx
  mov rsp, rbp
  ret

  err:
  mov rax, 0x3c
  xor rdi, rdi
  inc rdi
  syscall
